// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "07/02/2017 00:21:38"
                                                                                
// Verilog Test Bench template for design : test1
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module test1_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg clk250;
reg clk9600;
reg key;
reg reset;
reg [3:0] value;
// wires                                               
wire [2:0]  off_number;
wire ser;
wire [15:0]  show_value;

// assign statements (if any)                          
test1 i1 (
// port map - connection between master ports and signals/registers   
	.clk250(clk250),
	.clk9600(clk9600),
	.key(key),
	.off_number(off_number),
	.reset(reset),
	.ser(ser),
	.show_value(show_value),
	.value(value)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
#0   clk250 = 0; clk9600 = 0; reset = 1;
#2 	key = 1; value = 4'h1;   
#160 key = 0;    
#480 	key = 1; value = 4'h2;   
#160 key = 0;    
#480 	key = 1; value = 4'h3;   
#160 key = 0; 
#480 	key = 1; value = 4'h4;   
#160 key = 0; 
#480 	key = 1; value = 4'h5;   
#160 key = 0; 
#480 	key = 1; value = 4'h6;   
#160 key = 0; 
#480 	key = 1; value = 4'h7;   
#160 key = 0; 
#480 	key = 1; value = 4'h8;   
#160 key = 0; 
#480 	key = 1; value = 4'h9;   
#160 key = 0; 
#480 	key = 1; value = 4'hE;   
#160 key = 0;          
#480 	key = 1; value = 4'h9;   
#160 key = 0;           
#480 	key = 1; value = 4'hF;   
#160 key = 0;                    
// --> end                                            
//$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#2.0833 clk9600 = ~clk9600;

//@eachvec;                                              
// --> end                                             
end 

always
begin
#80 clk250 = ~clk250;
end
                                                   
endmodule

