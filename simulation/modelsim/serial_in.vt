// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "07/02/2017 11:01:33"
                                                                                
// Verilog Test Bench template for design : serial_in
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module serial_in_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg IN_clk;
reg IN_ser;
// wires                                               
wire [63:0]  OUT_data;
wire [4:0]  OUT_number;
wire [2:0]  OUT_off_number;
wire OUT_shanke_hand;

// assign statements (if any)                          
serial_in i1 (
// port map - connection between master ports and signals/registers   
	.IN_clk(IN_clk),
	.IN_ser(IN_ser),
	.OUT_data(OUT_data),
	.OUT_number(OUT_number),
	.OUT_off_number(OUT_off_number),
	.OUT_shanke_hand(OUT_shanke_hand)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
#0 IN_clk = 1;   
#0 IN_ser = 1;  
#2540 IN_ser = 0;        
#640 IN_ser = 1;
#640 IN_ser = 0;    
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;
#640 IN_ser = 1;
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 1;
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 0; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 0; 
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 0; 
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 0; 
#640 IN_ser = 1; 
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 0; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 0; 
#640 IN_ser = 0; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 0; 
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 0; 
#640 IN_ser = 1;  
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 0;  
#640 IN_ser = 0;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1;  
#640 IN_ser = 1; 
#640 IN_ser = 1; 
#640 IN_ser = 1;     
                                             
// --> end                                             
//$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#20 IN_clk = ~IN_clk;                                                       
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

